
import numpy as np
import pandas as pd
from pandas_datareader import data
import matplotlib.pyplot as plt


plt.rcParams['figure.figsize'] = [20, 15] 

import yfinance as yf

from datetime import datetime

start_date = datetime(2011, 1, 1) #set start date

end_date = datetime(2024, 1, 1) #set end date

"""
1. Select ETFs and download their price information from Yahoo Finance. 
"""
etf1 = yf.download(['VOO','VTI','VUG'], start = start_date, end = end_date)['Adj Close']

etf1.reset_index(inplace=True)

etf1['Year'] = etf1['Date'].dt.year
etf1['Month'] = etf1['Date'].dt.month

etf1.reset_index(inplace=True)




#2. Calculate the monthly returns of the three ETFs.

#daily returns
etf1[['VOO_ret_d','VTI_ret_d','VUG_ret_d']] = etf1[['VOO','VTI','VUG']].pct_change()

#monthly returns
etf1[['VOO_ret_d+1','VTI_ret_d+1','VUG_ret_d+1']] = etf1[['VOO_ret_d','VTI_ret_d','VUG_ret_d']]+1

etf2 = etf1[['VOO_ret_d+1','VTI_ret_d+1','VUG_ret_d+1','Year','Month']].groupby(['Year','Month']).prod()

etf2[['VOO_ret_m','VTI_ret_m','VUG_ret_m']] = etf2[['VOO_ret_d+1','VTI_ret_d+1','VUG_ret_d+1']]-1

etf3 = etf2[['VOO_ret_m','VTI_ret_m','VUG_ret_m']]

"""
3. Pick a target annualized volatility of the portfolio of the ETFs. Search and report the
weights on the three ETFs that maximize the average return of the portfolio of the three ETFs for
the target volatility level. (search_weight function in the example code can be used to search the
weights)
"""
from scipy.optimize import minimize

target_vol=[0.15]

no_fund=3

weight=[0.333,0.333,0.333] 

returns=etf3

def search_weight(weight, returns, target_vol, no_fund):
    def pret(weight):
        pret1=returns.multiply(weight).sum(axis=1)
        #we use the minimize function, so we mutiply portfolio average return with negative one
        pret1_mean_flip=-pret1.mean()
        return pret1_mean_flip
    
    def pvol(weight,target_vol):
        pret1=returns.multiply(weight).sum(axis=1)
        #target vol subtracted to make 0
        pret1_vol=pret1.std()*np.sqrt(12)-target_vol
        return pret1_vol
    
    #subtract 1 to make sure the sumweight = 0
    def sumweight(weight):
        return weight.sum()-1
    
    solve1=minimize(pret, weight,
        constraints=({"fun": pvol, "type": "eq", 'args': target_vol},{"fun": sumweight, "type": "eq"}),
        bounds=[(0,1)]*no_fund)

    weight_select=solve1.x
    portfolio_ret=-solve1.fun*12
    success=solve1.success

    return portfolio_ret, weight_select, success;


portfolio_ret,weight_select,success=search_weight(weight,returns,target_vol,no_fund)

success
#True

portfolio_ret
# 0.13470093037097255

weight_select
#array([0.4056046, 0.36214109, 0.2322522])

"""
4. Generate and report the figure showing your account balance over time under normal and weak
market conditions.
"""

def accountbalance(age_current, age_retire, monthlypayment, no_simulation, annualfee, portfolio_ret, target_vol):

    no_month=(age_retire-age_current)*12
    
    pret_sim1=np.random.normal(portfolio_ret/12,target_vol/np.sqrt(12),size=(no_month,no_simulation))

    pret_sim2=pret_sim1-annualfee/12

    value = 0
    balance=[]
    for i in range (no_month):
        value=(value+monthlypayment)*(1+pret_sim2[i,:])
        balance.append(value)
        balance1=pd.DataFrame(balance)


    balance1['month_no']=balance1.index+1

    no_month=(age_retire-age_current)*12

    balance2=pd.melt(balance1, id_vars=['month_no'], var_name='Sim_no', value_name='balance')
    
    normal1=balance2[['month_no','balance']].groupby(['month_no']).quantile(0.5)
    
    normal1['balance_m']=normal1['balance']/1000000
    
    weak1=balance2[['month_no','balance']].groupby(['month_no']).quantile(0.1)

    weak1['balance_m']=weak1['balance']/1000000

    return normal1,weak1;


normal1, weak1 = accountbalance(26, 60, 2100, 500, 0.0035,0.1347009, 0.15)

plt.rcParams['ytick.right'] = plt.rcParams['ytick.labelright'] = True
plt.rcParams['ytick.left'] = plt.rcParams['ytick.labelleft'] = False
#show Y axis lable to the right
plt.plot(normal1['balance_m'],label="normal market")
plt.plot(weak1['balance_m'],label='weak market')
plt.xlabel("No. of months", size=15) 
plt.title("Account Balance ($million)",size=36) 
plt.xticks(size=22)
plt.yticks(size=22)
plt.legend(fontsize=22)
